# frozen_string_literal: true

# Rails generator: promptly:prompt
# Usage:
#   rails g promptly:prompt user_onboarding/welcome_email --locales en es --engine erb
# Creates prompt templates under app/prompts/ following conventions.

require "fileutils"

begin
  require "rails/generators"
  require "rails/generators/named_base"
rescue LoadError
  # Allow gem to load without Rails present
end

module Promptly
  module Generators
    class PromptGenerator < (defined?(Rails::Generators::NamedBase) ? Rails::Generators::NamedBase : Object)
      if defined?(Rails::Generators::NamedBase)
        argument :name, type: :string, required: true, desc: "Prompt identifier, e.g., user_onboarding/welcome_email"

        class_option :engine, type: :string, default: "erb", desc: "Template engine: erb or liquid"
        class_option :locales, type: :array, default: [], desc: "Locales to generate (e.g., en es fr)"
        class_option :no_locale, type: :boolean, default: false, desc: "Generate only fallback (no locale suffix)"
        class_option :force, type: :boolean, default: false, desc: "Overwrite existing files"

        def create_prompt_files
          id_path = name.to_s
          base_dir = File.join("app", "prompts", File.dirname(id_path))
          basename = File.basename(id_path)

          FileUtils.mkdir_p(base_dir)

          ext = engine_extension
          resolve_targets(basename, ext).each do |rel|
            path = File.join(base_dir, rel)
            if File.exist?(path) && !options[:force]
              say_status :skip, path
              next
            end
            create_file(path, content_for_engine(ext), force: true)
          end
        end

        private

        def engine_extension
          engine = options[:engine].to_s.downcase
          case engine
          when "erb" then "erb"
          when "liquid" then "liquid"
          else
            say_status :error, "Unknown engine '#{engine}'. Use erb or liquid.", :red
            exit(1)
          end
        end

        def resolved_locales
          return [] if options[:no_locale]

          if options[:locales].any?
            options[:locales].map(&:to_s)
          elsif defined?(I18n) && I18n.respond_to?(:available_locales)
            Array(I18n.available_locales).map(&:to_s)
          else
            ["en"]
          end
        end

        def resolve_targets(basename, ext)
          locs = resolved_locales
          if options[:no_locale] || locs.empty?
            ["#{basename}.#{ext}"]
          else
            locs.uniq.map { |loc| "#{basename}.#{loc}.#{ext}" }
          end
        end

        def content_for_engine(ext)
          case ext
          when "erb"
            <<~ERB
              <!-- Prompt: generated by promptly:prompt -->
              <!-- Identifier: #{name} -->

              You are an AI assistant. Fill in content below using provided locals.

              Context:
              - Example local: <%= example || "value" %>

              Task:
              1. Explain the goal.
              2. Provide actionable steps.
              3. Keep it concise and clear.
            ERB
          when "liquid"
            <<~LIQ
              {# Prompt: generated by promptly:prompt #}
              {# Identifier: #{name} #}

              You are an AI assistant. Fill in content below using provided locals.

              Context:
              - Example local: {{ example | default: "value" }}

              Task:
              1. Explain the goal.
              2. Provide actionable steps.
              3. Keep it concise and clear.
            LIQ
          end
        end
      end
    end
  end
end
